[{"id":0,"href":"/docs/network/http-status/","title":"HTTP状态码","section":"网络","content":"\n"},{"id":1,"href":"/docs/other/how-visa-make-money/","title":"Visa是如何挣钱的","section":"其它","content":"\nWhy is the credit card called “𝐭𝐡𝐞 𝐦𝐨𝐬𝐭 𝐩𝐫𝐨𝐟𝐢𝐭𝐚𝐛𝐥𝐞 product in banks”? How does VISA/Mastercard make money?\nThe diagram below shows the economics of the credit card payment flow.\nThe cardholder pays a merchant $100 to buy a product.\nThe merchant benefits from the use of the credit card with higher sales volume, and needs to compensate the issuer and the card network for providing the payment service. The acquiring bank sets a fee with the merchant, called the “𝐦𝐞𝐫𝐜𝐡𝐚𝐧𝐭 𝐝𝐢𝐬𝐜𝐨𝐮𝐧𝐭 𝐟𝐞𝐞.”\n3 - 4. The acquiring bank keeps $0.25 as the 𝐚𝐜𝐪𝐮𝐢𝐫𝐢𝐧𝐠 𝐦𝐚𝐫𝐤𝐮𝐩, and $1.75 is paid to the issuing bank as the 𝐢𝐧𝐭𝐞𝐫𝐜𝐡𝐚𝐧𝐠𝐞 𝐟𝐞𝐞. The merchant discount fee should cover the interchange fee.\nThe interchange fee is set by the card network because it is less efficient for each issuing bank to negotiate fees with each merchant.\nThe card network sets up the 𝐧𝐞𝐭𝐰𝐨𝐫𝐤 𝐚𝐬𝐬𝐞𝐬𝐬𝐦𝐞𝐧𝐭𝐬 𝐚𝐧𝐝 𝐟𝐞𝐞𝐬 with each bank, which pays the card network for its services every month. For example, VISA charges a 0.11% assessment, plus a $0.0195 usage fee, for every swipe.\nThe cardholder pays the issuing bank for its services.\nWhy should the issuing bank be compensated? 🔹The issuer pays the merchant even if the cardholder fails to pay the issuer. 🔹The issuer pays the merchant before the cardholder pays the issuer. 🔹The issuer has other operating costs, including managing customer accounts, providing statements, fraud detection, risk management, clearing \u0026amp; settlement, etc.\nOver to you: Does the card network charge the same interchange fee for big merchants as for small merchants?\n"},{"id":2,"href":"/docs/security/identity-manage-types/","title":"不同的身份管理方式","section":"安全相关","content":"\n"},{"id":3,"href":"/docs/security/authentication-types-compare/","title":"不同认证方式的对比","section":"安全相关","content":"\n"},{"id":4,"href":"/docs/code/theory/language-compare/","title":"不同语言的工作原理","section":"理论","content":"\n"},{"id":5,"href":"/docs/code/block/mysql-batch-create-data/","title":"批量制造数据","section":"代码块","content":"利用mysql的存储过程快速插入大量数据\n1DELIMITER $$ 2 3USE `test`$$ 4 5DROP PROCEDURE IF EXISTS `add_user_batch`$$ 6 7CREATE DEFINER=`root`@`%` PROCEDURE `add_user_batch`(IN COUNT INT) 8BEGIN 9 DECLARE i INT; 10 DECLARE t_name VARCHAR(8); 11 DECLARE t_tag VARCHAR(20); 12 DECLARE t_age INT(2); 13 DECLARE t_sql_template VARCHAR(100); 14 DECLARE t_sql TEXT; 15 DECLARE t_tag_mod_val INT DEFAULT(25); 16 DECLARE t_commit_mod_val INT DEFAULT(100); 17 18 DECLARE t_start_time DATETIME; 19 DECLARE t_end_time DATETIME; 20 21 TRUNCATE TABLE `system_user`; 22 23 SET t_start_time=NOW(); 24 SET t_sql_template = \u0026#34;INSERT INTO `system_user`(NAME, age, tag) VALUES\u0026#34;; 25 SET t_sql = t_sql_template; 26 SET i = 1; 27 WHILE i \u0026lt;= COUNT 28 DO 29 SET t_age = FLOOR(1 + RAND() * 60); 30 SET t_name = LEFT(UUID(), 8); 31 -- 给tag随机制造空值 32 IF MOD(i, t_tag_mod_val) = 0 THEN 33 SET t_tag = \u0026#34;NULL\u0026#34;; 34 ELSE 35 SET t_tag = CONCAT(\u0026#34;\u0026#39;\u0026#34;,LEFT(UUID(), 8),\u0026#34;\u0026#39;\u0026#34;); 36 END IF; 37 38 SET t_sql = CONCAT(t_sql,\u0026#34;(\u0026#39;\u0026#34;,t_name,\u0026#34;\u0026#39;,\u0026#34;,t_age,\u0026#34;,\u0026#34;,t_tag,\u0026#34;)\u0026#34;); 39 40 IF MOD(i,t_commit_mod_val) != 0 THEN 41 SET t_sql = CONCAT(t_sql,\u0026#34;,\u0026#34;); 42 ELSE 43 SET t_sql = CONCAT(t_sql,\u0026#34;;\u0026#34;); 44 -- 只要达到t_commit_mod_val要求的次数，就执行并提交 45 SET @insert_sql = t_sql; 46 PREPARE stmt FROM @insert_sql; 47 EXECUTE stmt; 48 DEALLOCATE PREPARE stmt; 49 COMMIT; 50 SET t_sql=t_sql_template; 51 END IF; 52 SET i = i + 1; 53 END WHILE; 54 55 -- 不能被t_commit_mod_val整除时，余下的数据处理 56 IF LENGTH(t_sql) \u0026gt; LENGTH(t_sql_template) THEN 57 SET t_sql=CONCAT(SUBSTRING(t_sql,1,LENGTH(t_sql)-1),\u0026#39;;\u0026#39;); 58 SET @insert_sql = t_sql; 59 PREPARE stmt FROM @insert_sql; 60 EXECUTE stmt; 61 DEALLOCATE PREPARE stmt; 62 COMMIT; 63 END IF; 64 SET t_end_time=NOW(); 65 SELECT CONCAT(\u0026#39;insert data success,time cost \u0026#39;,TIMEDIFF(t_end_time,t_start_time)) AS finishedTag; 66END$$ 67 68DELIMITER ; "},{"id":6,"href":"/docs/linux/system/linux-file-system/","title":"文件类型说明","section":"Linux系统","content":"\nThe Linux file system used to resemble an unorganized town where individuals constructed their houses wherever they pleased. However, in 1994, the Filesystem Hierarchy Standard (FHS) was introduced to bring order to the Linux file system.\nBy implementing a standard like the FHS, software can ensure a consistent layout across various Linux distributions. Nonetheless, not all Linux distributions strictly adhere to this standard. They often incorporate their own unique elements or cater to specific requirements.\nTo become proficient in this standard, you can begin by exploring. Utilize commands such as \u0026ldquo;cd\u0026rdquo; for navigation and \u0026ldquo;ls\u0026rdquo; for listing directory contents. Imagine the file system as a tree, starting from the root (/). With time, it will become second nature to you, transforming you into a skilled Linux administrator.\n"},{"id":7,"href":"/docs/test/test-method-compare/","title":"测试方法对比","section":"测试相关","content":"\n"},{"id":8,"href":"/docs/microservice/develop/what-does-api-gateway-do/","title":"网关的作用","section":"微服务开发","content":"\n"},{"id":9,"href":"/docs/test/9-types-api-testing/","title":"9中API测试方式","section":"测试相关","content":"\nExplaining 9 types of API testing.\n🔹 Smoke Testing This is done after API development is complete. Simply validate if the APIs are working and nothing breaks.\n🔹 Functional Testing This creates a test plan based on the functional requirements and compares the results with the expected results.\n🔹 Integration Testing This test combines several API calls to perform end-to-end tests. The intra-service communications and data transmissions are tested.\n🔹 Regression Testing This test ensures that bug fixes or new features shouldn’t break the existing behaviors of APIs.\n🔹 Load Testing This tests applications’ performance by simulating different loads. Then we can calculate the capacity of the application.\n🔹 Stress Testing We deliberately create high loads to the APIs and test if the APIs are able to function normally.\n🔹 Security Testing This tests the APIs against all possible external threats.\n🔹 UI Testing This tests the UI interactions with the APIs to make sure the data can be displayed properly.\n🔹 Fuzz Testing This injects invalid or unexpected input data into the API and tries to crash the API. In this way, it identifies the API vulnerabilities.\n"},{"id":10,"href":"/docs/linux/system/linux-file-permissions/","title":"文件权限说明","section":"Linux系统","content":"\n"},{"id":11,"href":"/docs/microservice/develop/microservice-best-practices/","title":"微服务最佳实践","section":"微服务开发","content":"\n"}]